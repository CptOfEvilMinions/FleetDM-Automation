name: docker-compose test

on: 
  # Only run when Splunk docker-compose changes
  push:
    paths:
      - 'conf/docker/*'
      - '.env'
      - 'docker-compose.yml'

  # Only run when PR is requesting to merge with main
  pull_request:
    branches:
      - main

jobs:  
  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      
      - name: Generate TLS certs
        run: 'openssl req -x509 -new -nodes -keyout conf/tls/fleet.key -out conf/tls/fleet.crt -config conf/tls/tls.conf'
      
      - name: Build Docker images
        run: 'docker-compose build'

      - name: Lower CPU count on containers
        run: "sed -i 's/cpus:.*/cpus: 1/g' docker-compose.yml"

      - name: Init Fleet database
        run: 'docker-compose run --rm fleet fleet prepare db --config /etc/fleet/fleet.yml'

      - name: Run docker-compose
        run: 'docker-compose up -d'

      - name: Download AND UNZIP FleetCLI
        run: |
          curl -L -s https://github.com/fleetdm/fleet/releases/download/fleet-v$(cat .env | grep FLEETDM_VERSION | awk -F= '{print $2}')/fleetctl_v$(cat .env | grep FLEETDM_VERSION | awk -F= '{print $2}')_linux.zip --output /tmp/fleetctl_v$(cat .env | grep FLEETDM_VERSION | awk -F= '{print $2}')_linux.zip
          unzip /tmp/fleetctl_v$(cat .env | grep FLEETDM_VERSION | awk -F= '{print $2}')_linux.zip
          mv fleetctl_v$(cat .env | grep FLEETDM_VERSION | awk -F= '{print $2}')_linux/fleetctl /usr/local/bin/fleetctl

      - name: FleetCLI setup Fleet server
        run: |
          fleetctl config set --address https://127.0.0.1:8443 --tls-skip-verify
          fleetctl setup --email admin@hackinglab.local --name 'Sherlock Holmes' --org-name 'Hackinglab' --password $(cat .env | grep FLEETDM_MYSQL_PASSWORD | awk -F= '{print $2}')

      - name: Install Osquery
        run:
          curl https://github.com/osquery/osquery/releases/download/$(cat .env | grep OSQUERY_VERSION | awk -F= '{print $2}' | xargs)/osquery_$(cat .env | grep OSQUERY_VERSION | awk -F= '{print $2}' | xargs)-1.linux_amd64.deb --output /tmp/osquery_$(cat .env | grep OSQUERY_VERSION | awk -F= '{print $2}' | xargs)-1.linux_amd64.deb
          dpkg -i /tmp/osquery_$(cat .env | grep OSQUERY_VERSION | awk -F= '{print $2}' | xargs)-1.linux_amd64.deb

      - name: Get Osquery enroll token
        run: |
          fleetctl get enroll_secret | grep 'secret: ' | awk -F: '{print $2}' | xargs > /tmp/osquery.key
          sudo mv /tmp/osquery.key /etc/osquery/osquery.key

      - name: Start OsqueryD in background
        run: |
          $(which osqueryi) --daemonize --flagfile conf/osquery/osquery_linux.flags


      - name: Run query on Osquery agent
        run: |
          fleetctl query --query 'select hostname from system_info;' --labels='All Hosts' > results.json
          [[ "$(hostname)" == "$(cat results.json | grep hostname)" ]] && echo "Equal" || echo "Not equal" && exit 1
